version: "2.1"

defaults:
  only-tag-filter: &filter-only-tagged
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /.*/
  only-master-filter: &filter-only-master
    filters:
      branches:
        only: /master/
      tags:
        ignore: /.*/

executors:
  python-3.7:
    docker:
      - image: circleci/python:3.7

workflows:
  version: "2"
  build-workflow:  # PRs and merges to master
    jobs:
      - test
#      - upload-coverage:
#          <<: *filter-only-master
#          requires: test
#  release-workflow:  # gated to tags
#    jobs:
#      - build:
#          <<: *filter-only-tagged
#      - upload-python:
#          <<: *filter-only-tagged
#          requires: build
#          context: org-global
#      - upload-docker:
#          <<: *filter-only-tagged
#          requires: build
#          context: org-global
#      - upload-docs:
#          <<: *filter-only-tagged
#          requires: build
#          context: org-global

jobs:
#  build: {}
  test:  # run tests with coverage enabled
    working_directory: ~/source
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache:  # if we have a cached env, use it
          keys:
            - dependencies-{{ checksum "setup.py" }}
            - dependencies-
      - run:
          name: Install dependencies
          command: |
            python -mvenv env
            . ./env/bin/activate
            pip install -e '.[dev]'
      - save_cache:
          paths:
            - ./env
          key: dependencies-{{ checksum "setup.py" }}
      - run:
          name: Run tests
          command: |
            . ./env/bin/activate
            mkdir -p build/reports
            yapf -dr docs/conf.py harserver tests > build/reports/yapf.diff
            nosetests \
              --with-coverage --cover-xml --cover-xml-file build/reports/coverage.xml \
              --with-xunit --xunit-file build/reports/nosetests.xml
            flake8 --output-file build/reports/pep8.txt harserver tests
      - store_artifacts:
          path: build/reports
          destination: build-reports
#  upload-coverage: {}
#  upload-docker: {}
#  upload-docs: {}
#  upload-python: {}
